# docker-compose.yml
# Trading Bot Complete Stack

version: '3.8'

services:
  # Trading Bot Application
  trading-bot:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: trading-bot-app
    restart: unless-stopped
    ports:
      - "${WEB_PORT:-5000}:5000"  # Web UI
      - "${API_PORT:-8000}:8000"  # API
    environment:
      # Application settings
      - ENVIRONMENT=production
      - DEBUG=false
      
      # Database connections (Docker internal)
      - MONGODB_URL=mongodb://mongodb:27017/trading_bot
      - REDIS_URL=redis://redis:6379/0
      
      # External services (Docker internal)
      - CCXT_GATEWAY_URL=http://ccxt-bridge:3000
      - QUICKCHART_URL=http://quickchart:3400
      
      # Security (from host .env)
      - SECRET_KEY=${SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      
      # Trading configuration
      - DEFAULT_TRADING_MODE=${DEFAULT_TRADING_MODE:-paper}
      - DEFAULT_EXCHANGE=${DEFAULT_EXCHANGE:-kucoin}
      
      # Telegram configuration
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_ALLOWED_USERS=${TELEGRAM_ALLOWED_USERS}
      
      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FORMAT=json
    
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./config:/app/config
      - ./.env:/app/.env:ro
    
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      ccxt-bridge:
        condition: service_started
      quickchart:
        condition: service_started
    
    networks:
      - trading_network
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: trading-bot-mongodb
    restart: unless-stopped
    ports:
      - "${MONGODB_PORT:-27017}:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USERNAME:-trader}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD:-trading123}
      - MONGO_INITDB_DATABASE=trading_bot
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongodb/init:/docker-entrypoint-initdb.d:ro
      - ./docker/mongodb/mongod.conf:/etc/mongod.conf:ro
    networks:
      - trading_network
    command: ["mongod", "--config", "/etc/mongod.conf"]
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: trading-bot-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: >
      redis-server 
      --appendonly yes 
      --maxmemory 256mb 
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - trading_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ccxt-gateway (Exchange API Bridge)
  ccxt-bridge:
    image: ccxt-gateway:latest
    container_name: trading-bot-ccxt
    restart: unless-stopped
    ports:
      - "${CCXT_PORT:-3000}:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - RATE_LIMIT_ENABLED=true
      - RATE_LIMIT_MAX=100
      - RATE_LIMIT_WINDOW=60000  # 1 minute
    networks:
      - trading_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # QuickChart (Chart Generation Service)
  quickchart:
    image: ianw/quickchart:latest
    container_name: trading-bot-charts
    restart: unless-stopped
    ports:
      - "${QUICKCHART_PORT:-8080}:3400"
    environment:
      - PORT=3400
      - CACHE_TIMEOUT=60000
      - MAX_WIDTH=2000
      - MAX_HEIGHT=2000
      - ALLOW_FILE_PROTOCOL=false
      - RATE_LIMIT_ENABLED=true
    networks:
      - trading_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3400/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: trading-bot-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - trading-bot
    networks:
      - trading_network
    profiles:
      - production  # Only start with --profile production

  # Prometheus Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: trading-bot-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - trading_network
    profiles:
      - monitoring

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: trading-bot-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - trading_network
    profiles:
      - monitoring

# Named Volumes
volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Networks
networks:
  trading_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16